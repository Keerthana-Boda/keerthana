							Doubly Linked List 
DESCRIPTION

This section will guide you to: 

● Write a program in Java to traverse a doubly linked list in the forward and backward directions
● Use Eclipse (the popular text editor for Java programs) 
● Push code to Git

 package lists;

public class DoubleLinkedList 
{
	Node head;
	class Node 
	{
		int data;
		Node pre;
		Node next;
		Node(int d)
		{
			data = d;
		}
	}
	public void push(int new_data)
	{
		Node new_Node = new Node(new_data);
		new_Node.next = head;
		new_Node.pre = null;
		if(head != null)
		{
			head.pre = new_Node;
		}
		head = new_Node;
	}
	public void insertAfter(Node pre_Node, int new_data) 
	{
		if(pre_Node == null)
		{
			System.out.println("The given node cannot be null");
			return;
		}
		Node new_node = new Node(new_data);
		new_node.next = pre_Node.next;
		pre_Node.next = new_node;
		new_node.pre = pre_Node;
		if(new_node.next!=null)
		{
			new_node.next.pre = new_node;
		}
	}
	void append(int new_data)
	{
		Node new_node = new Node(new_data);
		Node last = head;
		new_node.next = null;
		if(head == null)
		{
			new_node.pre = null;
			head = new_node;
			return;
		}
		while(last.next != null)
		{
			last = last.next;
		}
		last.next = new_node;
		new_node.pre = last;
	}
	public void printList(Node node)
	{
		Node last = null;
		System.out.println("Traversal in forward Direction");
		while(node != null)
		{
			System.out.println(node.data + " ");
			last = node;
			node = node.next;
		}
		System.out.println("Traversal in reverse direction");
		while(last != null)
		{
			System.out.println(last.data + " ");
			last = last.pre;
		}
	}
		
	public static void main(String[] args) 
	{
		// TODO Auto-generated method stub
		DoubleLinkedList ob= new DoubleLinkedList();
		ob.append(9);
		ob.push(1);
		ob.push(8);
		ob.append(6);
		ob.insertAfter(ob.head.next, 3);
		System.out.println("Created Double Linked List is : ");
		ob.printList(ob.head);
	}

}

OUTPUT:

Created Double Linked List is : 
Traversal in forward Direction
8 
1 
3 
9 
6 
Traversal in reverse direction
6 
9 
3 
1 
8 

