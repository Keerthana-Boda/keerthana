			Hibernate Configuration Using XML in Eclipse ..
DESCRIPTION
This section will guide you to:
● Set up Eclipse to work with Hibernate
● Create a database and a table in MySQL
● Configure Hibernate using XML to work with the table
● Create an HTML page to call a servlet
● Create a servlet that will display rows from the table

HibernateUtil.java

package com.simpli;

import org.hibernate.SessionFactory;
import org.hibernate.boot.Metadata;
import org.hibernate.boot.MetadataSources;
import org.hibernate.boot.registry.StandardServiceRegistry;
import org.hibernate.boot.registry.StandardServiceRegistryBuilder;

public class HibernateUtil {
	private static final SessionFactory sessionFactory;

	static {
		try {
			StandardServiceRegistry standardRegistry = new StandardServiceRegistryBuilder()
					.configure("hibernate.cfg.xml").build();

			Metadata metaData = new MetadataSources(standardRegistry).getMetadataBuilder().build();
			
			sessionFactory = metaData.getSessionFactoryBuilder().build();

		} catch (Throwable th) {
			throw new ExceptionInInitializerError(th);
		}
	}

	public static SessionFactory getSessionFactory() {
		return sessionFactory;
	}


}


hibernate.cfg.xml

<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE hibernate-configuration PUBLIC
"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>       
  <session-factory>
    <!-- Database connection settings -->
    <property name="connection.driver_class">com.mysql.cj.jdbc.Driver</property>
    <property name="connection.url">jdbc:mysql://localhost:3306/ecommerce</property>
    <property name="connection.username">root</property>
    <property name="connection.password">Simplilearn</property>   
  </session-factory>
  <mapping  resource="com/mydatabase/EProduct.hbm.xml"/>
</hibernate-configuration>

EProduct.hbm.xml

<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
"-//Hibernate/Hibernate Mapping DTD 3.0//EN"
"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping package="com.simpli">
    <class name="EProduct" table="eproduct">
        <id name="ID" column="ID">
            <generator class="increment"/>
        </id>
        <property name="name" type="string" column="NAME"/>
        <property name="price" type="big_decimal" column="PRICE"/>
        <property name="dateAdded" type="timestamp" column="DATE_ADDED"/>
    </class>
</hibernate-mapping>

EProduct.java

package com.simpli;

import java.math.BigDecimal;
import java.util.Date;

public class EProduct {
	private long ID;
	private String name;
	private BigDecimal price;
	private Date dateAdded;
	public EProduct() { } 
	public EProduct(long id, String name, BigDecimal price, Date dateAdded) { 
	this.ID = id; 
	this.name = name; 
	this.price = price; 
	this.dateAdded = dateAdded; 
	} 
	
	public long getID() { 
		return ID; 
	} 
	public void setID(long iD) { ID = iD; } 
	public String getName() { return name; } 
	public void setName(String name) { this.name = name; } 
	public BigDecimal getPrice() { return price; } 
	public void setPrice(BigDecimal price) { this.price = price; } 
	public Date getDateAdded() { return dateAdded; } 
	public void setDateAdded(Date dateAdded) { this.dateAdded = dateAdded; }

}

HibernateQueryDemo

package com.simpli;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.Session;
import org.hibernate.SessionFactory;

/**
 * Servlet implementation class HibernateQueryDemo
 */
@WebServlet("/query-demo")
public class HibernateQueryDemo extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public HibernateQueryDemo() {
        super();
        // TODO Auto-generated constructor stub
    }

	
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		PrintWriter out = response.getWriter();
		
		out.println("<html><body>");

	// STEP 1: Get a Session (connection) from the Session Factory class
		SessionFactory factory = HibernateUtil.getSessionFactory();

	// STE2 Create the session object
		Session session = factory.openSession();

		out.println("Hibernate Session opened.<br>");
	// STEP 3 Query the DB and get the data
		List<EProduct> eproduct = session.createQuery("from EProduct").list();
		session.close();
		out.println("<table border=1>");
		for (EProduct prod : eproduct) {
			out.println("<tr>" + "<td>" + prod.getID() + "<td>" + prod.getName() + "<td>" + prod.getPrice() + "<td>"
				+ prod.getDateAdded());
		}
		out.println("</table>");
		session.close();

		out.println("Hibernate Session closed.<br>");

		out.println("</body></html>");
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}

index.html

<h3>Hibernate Query Demo </h3>

<a href="query-demo">Query Here and get the data</a><br>

OUTPUT

Hibernate Session opened.
1	Fan	4000.00	2023-05-29 05:36:23.0
2	AC	30000.00	2023-05-29 05:36:23.0
3	Cooler	4000.00	2023-05-29 05:36:23.0
4	MAC PC 2	3.00	2023-05-29 05:55:53.0
5	hp	80000.00	2023-05-29 06:12:59.0
6	HP Laptop ABC	12000.00	2023-05-29 06:28:18.0
7	DELL PC ABC	19000.00	2023-05-29 06:28:18.0
8	Samsung Laptop PQR	22000.00	2023-05-29 06:28:18.0
9	Phillips Mixer	2000.60	2023-05-29 06:36:01.0
10	Phillips Mixer	2000.60	2023-05-29 06:55:19.0
11	acer	10000.90	2023-05-29 06:58:43.0
12	lenovo	40000.08	2023-05-30 12:43:46.0
13	lenovo	40000.08	2023-05-30 12:45:24.0
14	lenovo	80000.00	2023-05-30 13:41:49.0
Hibernate Session closed.
