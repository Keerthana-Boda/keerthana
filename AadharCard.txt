				mAadhar Application.
Course-end Project 8
DESCRIPTION
Problem statement:
Develop an application to automate the process of applying for an Aadhar Card by making it smoother for Indian citizens.
Scenario:
Varniraj Service PVT. LTD is closely working with “The Government of India” to help them get a solution for processing applications for Aadhaar Card. Application is intended to register citizens and let them display ID to process their Aadhar Card application.

mAadharCardBackend

AadharApplicationController.java

package com.backend.aadhar;
import com.backend.User.UserObject;
import com.backend.User.UserServices;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;
@RestController
@RequestMapping("/AadharApp")
@CrossOrigin(origins = "http://localhost:4200/", methods = {RequestMethod.GET, RequestMethod.POST})
public class AadharApplicationController {
    @Autowired
    AadharApplicationServices applicationServices;

    @Autowired
    UserServices userServices;

    @GetMapping("/admin/applications")
    public ResponseEntity<List<NewAadharApplicationObject>> allApplications () {
        try {
            List<NewAadharApplicationObject> ApplicationsList = new ArrayList<NewAadharApplicationObject>();
            applicationServices.findByAllApplications().forEach(ApplicationsList::add);

            if(ApplicationsList.isEmpty()) {
                return new ResponseEntity<>(HttpStatus.NO_CONTENT);
            }
            else {
                return new ResponseEntity<>(ApplicationsList,HttpStatus.OK);
            }
        }
        catch (Exception e) {
            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @PutMapping("/admin/applications/approvenewAadharApplication")
    public ResponseEntity<Object> approveApplication (@RequestBody NewAadharApplicationObject application) {
        try {
            int applicationId = application.getApplicationId();

            List<NewAadharApplicationObject> applicationForApproval =  applicationServices.findByApplicationId(applicationId);

            if(applicationForApproval.size() != 0) {

                String citizenId = applicationForApproval.get(0).getCitizenId();

                List<UserObject> user =  userServices.findByCitizenId(citizenId);
                System.out.println("****************************");
                System.out.println("ctz " + user.get(0));
                System.out.println("****************************");
                user.get(0).setIssueDate();
                userServices.updateUser(user.get(0));   // updating the user entity with the issued date

                applicationServices.deleteApprovedApplication(applicationId);   // deleting the approved application

                return new ResponseEntity<>("Application approved successfully.",HttpStatus.OK);
            }
            else {
                return new ResponseEntity<>("Incorrect Application Id.",HttpStatus.BAD_REQUEST);
            }
        }
        catch (Exception e) {
            System.out.println("exception is : " + e);
            return new ResponseEntity<Object>("There is some issue, please try again later.", HttpStatus.NOT_ACCEPTABLE);
        }
    }

//    @PutMapping("/citizens/applications/updateAadhar")
//    public ResponseEntity<Object> approveUpdateAadharApplication (@RequestBody UserObject userNewDetails) {
//        try {
//            int applicationId = application.getApplicationId();
//            List<NewAadharApplicationObject> applicationForApproval =  applicationServices.findByApplicationId(applicationId);
//
//            if(applicationForApproval.size() != 0) {
//
//                String citizenId = applicationForApproval.get(0).getCitizenId();
//                List<UserObject> user =  userServices.findByCitizenId(citizenId);
//                user.get(0).setIssueDate();
//                userServices.updateUser(user.get(0));
//
//                applicationServices.deleteApprovedApplication(applicationId);
//
//                return new ResponseEntity<>("Application approved successfully.",HttpStatus.OK);
//            }
//            else {
//                return new ResponseEntity<>("Incorrect Application Id.",HttpStatus.BAD_REQUEST);
//            }
//        }
//        catch (Exception e) {
//            System.out.println("exception is : " + e);
//            return new ResponseEntity<Object>("There is some issue, please try again later.", HttpStatus.NOT_ACCEPTABLE);
//        }
//    }
}

AadharApplicationJPARepo.java

package com.backend.aadhar;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import java.util.List;
@Repository
public interface AadharApplicationJPARepo extends JpaRepository<NewAadharApplicationObject, Integer> {
    List<NewAadharApplicationObject> findByApplicationId(int applicationId);
    List<NewAadharApplicationObject> findAll();
}

											AadharApplicationServices.java

package com.backend.aadhar;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;
@Service
public class AadharApplicationServices {
    @Autowired
    AadharApplicationJPARepo aadharApplicationRepo;

    public NewAadharApplicationObject newApplication(NewAadharApplicationObject application) {
        return aadharApplicationRepo.save(application);
    }

    public List<NewAadharApplicationObject> findByApplicationId(int applicationId) {
        return  aadharApplicationRepo.findByApplicationId(applicationId);
    }

    public List<NewAadharApplicationObject> findByAllApplications() {
        return  aadharApplicationRepo.findAll();
    }
    public void deleteApprovedApplication(int applicationId) {
        List<NewAadharApplicationObject> approvedApplication = aadharApplicationRepo.findByApplicationId(applicationId);
        aadharApplicationRepo.delete(approvedApplication.get(0));
    }
}


								NewAadharApplicationObject.java

package com.backend.aadhar;
import javax.persistence.*;
import java.text.SimpleDateFormat;
import java.util.Date;
@Entity
public class NewAadharApplicationObject {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int applicationId;

    @Column(unique = true)
    private String citizenId;

    private String dateOfApplication;

    private String passportId;
    private String currentStatus;
    private String typeOfApplication;
    private boolean isIssued;

    public int getApplicationId() {
        return applicationId;
    }

    public void setApplicationId(int applicationId) {
        this.applicationId = applicationId;
    }

    public String getCitizenId() {
        return citizenId;
    }

    public void setCitizenId(String citizenId) {
        this.citizenId = citizenId;
    }

    public String getDateOfApplication() {
        return dateOfApplication;
    }

    public void setDateOfApplication(String dateOfApplication) {
        this.dateOfApplication = dateOfApplication;
    }

    public String getPassportId() {
        return passportId;
    }

    public void setPassportId(String passportId) {
        this.passportId = passportId;
    }

    public String getCurrentStatus() {
        return currentStatus;
    }

    public void setCurrentStatus(String currentStatus) {
        this.currentStatus = currentStatus;
    }

    public String getTypeOfApplication() {
        return typeOfApplication;
    }

    public void setTypeOfApplication(String typeOfApplication) {
        this.typeOfApplication = typeOfApplication;
    }

    public boolean isIssued() {
        return isIssued;
    }

    public void setIssued(boolean issued) {
        isIssued = issued;
    }

    public void setDateOfTheApplication (){
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
        Date date = new Date();
        this.dateOfApplication = String.valueOf(formatter.format(date));
    }
}


					Admin
				AdminObject.java
					
package com.backend.admin;
public class AdminObject {
}

				User
			UserController.java
				
				
package com.backend.User;
import com.backend.aadhar.NewAadharApplicationObject;
import com.backend.aadhar.AadharApplicationServices;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.util.List;
@RestController
@RequestMapping("/AadharApp/citizens")
@CrossOrigin(origins = "http://localhost:4200/", methods = {RequestMethod.GET, RequestMethod.POST})
public class UserController {

    @Autowired
    UserServices userServices;

    @Autowired
    AadharApplicationServices aadharApplicationServices;


    @PostMapping("/signUp")
    public ResponseEntity<Object> signUp(@RequestBody UserObject user){
        try {
            UserObject res = userServices.addUser(user);

            if(res != null) {
                return new ResponseEntity<Object>(res, HttpStatus.CREATED);
            }
            else {
                return new ResponseEntity<Object>("There is some issue, please try again later.", HttpStatus.NO_CONTENT);
            }
        }
        catch (Exception e) {
            return new ResponseEntity<Object>("Facing some issue while trying to create your account, please try with different username.", HttpStatus.BAD_REQUEST);
        }
    }


    @PostMapping("/logIn")
    public ResponseEntity<Object> signIn(@RequestBody UserLoginObject auth) {

        System.out.println(auth.getCitizenId() + " " + auth.getPassword());

        try {
            List<UserObject> user =  userServices.findByCitizenId(auth.getCitizenId());
            if(user.size() != 0) {
                if(user.get(0).getMobile().equals(auth.getPassword())){
                    return new ResponseEntity<>(user, HttpStatus.OK);
                }
                else {
                    return new ResponseEntity<>("Incorrect password.",HttpStatus.UNAUTHORIZED);
                }
            }
            else {
                return new ResponseEntity<>("Incorrect citizenId.",HttpStatus.BAD_REQUEST);
            }
        }
        catch (Exception e) {
            System.out.println("exception is : " + e);
            return new ResponseEntity<Object>("There is some issue, please try again later.", HttpStatus.NOT_ACCEPTABLE);
        }
    }

    @PostMapping("/dashboard")
    public ResponseEntity<Object> dashboard(@RequestBody UserObject signedInUser) {
        try {
            List<UserObject> user =  userServices.findByCitizenId(signedInUser.getCitizenId());

            if(user.size() != 0) {
                    return new ResponseEntity<>(user, HttpStatus.OK);
            }
            else {
                return new ResponseEntity<>("Incorrect citizenId.",HttpStatus.BAD_REQUEST);
            }
        }
        catch (Exception e) {
            System.out.println("exception is : " + e);
            return new ResponseEntity<Object>("There is some issue, please try again later.", HttpStatus.NOT_ACCEPTABLE);
        }
    }

    @PostMapping("/issueAadhar")
    public ResponseEntity<Object> issueAadhar(@RequestBody NewAadharApplicationObject newApplication){
        newApplication.setDateOfTheApplication();
        System.out.println(newApplication.getCitizenId());
        try {
            NewAadharApplicationObject res = aadharApplicationServices.newApplication(newApplication);

            if(res != null) {
                List<UserObject> user =  userServices.findByCitizenId(newApplication.getCitizenId());
                if(user.size() != 0) {
                    user.get(0).setAadharApplied(true);
                    user.get(0).setPassportId(newApplication.getPassportId());
                    userServices.updateUser(user.get(0));   // updating the user entity that applied for aadhar
                }
                return new ResponseEntity<Object>(res, HttpStatus.CREATED);
            }
            else {
                return new ResponseEntity<Object>("Facing some issue while trying to submit your new Application, please try after some time.", HttpStatus.NO_CONTENT);
            }
        }
        catch (Exception e) {
            return new ResponseEntity<Object>("There is some issue, may be you have already applied for aadhar.", HttpStatus.BAD_REQUEST);
        }
    }

    @PostMapping("/updateAadhar")
    public ResponseEntity<Object> updateAadhar(@RequestBody NewAadharApplicationObject newApplication){
        newApplication.setDateOfTheApplication();
        System.out.println(newApplication.getCitizenId());
        try {
            NewAadharApplicationObject res = aadharApplicationServices.newApplication(newApplication);

            if(res != null) {
                List<UserObject> user =  userServices.findByCitizenId(newApplication.getCitizenId());
                if(user.size() != 0) {
                    user.get(0).setAadharApplied(true);
                    userServices.updateUser(user.get(0));   // updating the user entity that applied for aadhar
                }
                return new ResponseEntity<Object>(res, HttpStatus.CREATED);
            }
            else {
                return new ResponseEntity<Object>("Facing some issue while trying to submit your update Application, please try after some time.", HttpStatus.NO_CONTENT);
            }
        }
        catch (Exception e) {
            return new ResponseEntity<Object>("There is some issue, may be you have already applied for aadhar.", HttpStatus.BAD_REQUEST);
        }
    }
}

						 UserJPARepo.java


package com.backend.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import java.util.List;
@Repository
public interface UserJPARepo extends JpaRepository<UserObject, Integer> {
    //List<UserObject> findByName(String Username);
    List<UserObject> findByUserId(int userId);
    List<UserObject> findByCitizenId(String citizenId);
}


						UserLoginObject.java

package com.backend.User;
public class UserLoginObject {
    private String citizenId;
    private String password;

    public String getCitizenId() {
        return citizenId;
    }

    public void setCitizenId(String citizenId) {
        this.citizenId = citizenId;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }
}

				UserObject.java


package com.backend.User;

import com.sun.istack.NotNull;

import javax.persistence.*;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

@Entity
public class UserObject {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int userId;


    private String userFullName;
    private String email;
    private String gender;
    private String address;

    private String mobile;

    @Column(unique = true)
    private String citizenId;

    private boolean aadharApplied;  // to chech whether a user is aadhar holder or not
    private String passportId;
    private String issueDate;

    private final int role;
    // 0 for normal user and 1 for admin

    public UserObject() {
        this.role = 0;
        this.citizenId = generateCitizenId();
        this.aadharApplied = false;
    }


    public int getUserId() {
        return userId;
    }

    public String getUserFullName() {
        return userFullName;
    }

    public void setUserFullName(String userFullName) {
        this.userFullName = userFullName;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getGender() {
        return gender;
    }

    public void setGender(String gender) {
        this.gender = gender;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public String getMobile() {
        return mobile;
    }

    public void setMobile(String mobile) {
        this.mobile = mobile;
    }

    public String getCitizenId() {
        return citizenId;
    }

    public boolean isAadharApplied() {
        return aadharApplied;
    }

    public void setAadharApplied(boolean aadharApplied) {
        this.aadharApplied = aadharApplied;
    }

    public String getPassportId() {
        return passportId;
    }

    public void setPassportId(String passportId) {
        this.passportId = passportId;
    }

    public String getIssueDate() {
        return issueDate;
    }

    public void setIssueDate() {
        addIssueDate();
    }

    public int getRole() {
        return role;
    }


    private String generateCitizenId() {
        SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMddHHmmss");
        Date citizenId = new Date();

//        Calendar cal = Calendar.getInstance();
//        cal.add(Calendar.DATE, +7);
//        Date todate1 = cal.getTime();
//        String fromdate = formatter.format(todate1);
//        System.out.println(formatter.format(citizenId) + " " + fromdate);

        return formatter.format(citizenId);
    }

    private void addIssueDate() {
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
        Date issueDate = new Date();
        this.issueDate = formatter.format(issueDate);
    }
}


					UserServices.java

package com.backend.User;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.List;

@Service
public class UserServices {
    @Autowired
    UserJPARepo userRepo;

    private RestTemplate template= new RestTemplate();

    //add person
    public UserObject addUser(UserObject person) {
        return userRepo.save(person);
    }

    public UserObject updateUser(UserObject person) {
        return userRepo.save(person);
    }

    public List<UserObject> findByCitizenId(String citizenId) {
        return  userRepo.findByCitizenId(citizenId);
    }
}


				MAadharBackendApplication.java


package com.backend;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class MAadharBackendApplication {

    public static void main(String[] args) {
        SpringApplication.run(MAadharBackendApplication.class, args);
    }
}

				Application.properties
				
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp
# Database
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/aadhar
spring.datasource.username=root
spring.datasource.password=Keerthana@02
#spring.jpa.show-sql=true
#spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect





					Tests

				MAadharBackendApplicationTests.java

package com.backend;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
@SpringBootTest
class MAadharBackendApplicationTests 
{
    @Test
    void contextLoads() {
    }
}

							Frontend
				
				
						Create-employee.component.html
						
						
<div class="col-md-6 offset-md-3">
    <h3>Request  New Aadhar </h3>
    <form (ngSubmit) = "onSubmit()">
    
        <div class="form-group">
            <label> First Name</label>
            <input type="text" class ="form-control" id = "firstName"
                [(ngModel)] = "employee.firstName" name = "firstName">
        </div>
    
        <div class="form-group">
            <label> Last Name</label>
            <input type="text" class ="form-control" id = "lastName"
                [(ngModel)] = "employee.lastName" name = "lastName">
        </div>
        <div class="form-group">
            <label> Date of Birth</label>
            <input type="date" class ="form-control" id = "dob"
                [(ngModel)] = "employee.dob" name = "dob">
        </div>
        <div class="form-group">
            <label> Address </label>
            <input type="text" class ="form-control" id = "address"
                [(ngModel)] = "employee.address" name = "address">
        </div>
    
        <div class="form-group">
            <label> Email Id</label>
            <input type="text" class ="form-control" id = "emailId"
                [(ngModel)] = "employee.emailId" name = "emailId">
        </div>
    
        <div class="form-group">
            <label> Mobile Number</label>
            <input type="text" class ="form-control" id = "mobileNo"
                [(ngModel)] = "employee.mobileNo" name = "mobileNo">
        </div>

        <div class="form-group">
            <label> Gender</label>
            <input type="text" class ="form-control" id = "gender"
                [(ngModel)] = "employee.gender" name = "gender">
        </div>
    
        
    
        <button class = "btn btn-success" type ="submit">Submit</button>
    
    </form>
    </div> 


							create-employee.component.spec.ts


import { async, ComponentFixture, TestBed } from '@angular/core/testing';

import { CreateEmployeeComponent } from './create-employee.component';

describe('CreateEmployeeComponent', () => {
  let component: CreateEmployeeComponent;
  let fixture: ComponentFixture<CreateEmployeeComponent>;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [ CreateEmployeeComponent ]
    })
    .compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(CreateEmployeeComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
						create-employee.component.ts
						
import { Component, OnInit } from '@angular/core';
import { Employee } from '../employee';
import { EmployeeService } from '../employee.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-create-employee',
  templateUrl: './create-employee.component.html',
  styleUrls: ['./create-employee.component.css']
})
export class CreateEmployeeComponent implements OnInit {

  employee: Employee = new Employee();
  constructor(private employeeService: EmployeeService,
    private router: Router) { }

  ngOnInit(): void {
  }

  saveEmployee(){
    this.employeeService.createEmployee(this.employee).subscribe( data =>{
      console.log(data);
      this.goToEmployeeList();
    },
    error => console.log(error));
  }

  goToEmployeeList(){
    this.router.navigate(['/employees']);
  }
  
  onSubmit(){
    console.log(this.employee);
    this.saveEmployee();
  }
}

						employee-list
						employee-list.html
						
<h2> Aadhar List</h2>
<table class = "table table-striped">
    <thead>
        <tr>
            <th> First Name</th>
            <th> Last Name </th>
            <th> DOb</th>
            <th> Address</th>
            <th> Email Id</th>
            <th> Mobile NO</th>
            <th> Gender</th>
            <th> Actions </th>
        </tr>
    </thead>
    <tbody>
        <tr *ngFor = "let employee of employees" >
            <td> {{ employee.firstName }} </td>
            <td> {{ employee.lastName }} </td>
            <td> {{ employee.dob }} </td>
            <td> {{ employee.address }} </td>
            <td> {{ employee.emailId }} </td>
            <td> {{ employee.mobileNo}} </td>
            <td> {{ employee.gender}} </td>
            <td>
                <button (click) = "updateEmployee(employee.id)" class = "btn btn-info"> Update</button>
                <button (click) = "deleteEmployee(employee.id)" class = "btn btn-danger" style="margin-left: 20px"> Delete</button>
                <button (click) = "employeeDetails(employee.id)" class = "btn btn-info" style="margin-left: 20px"> View</button>
            </td>
        </tr>
    </tbody>
</table>

							employee-list.component.spec.ts

import { async, ComponentFixture, TestBed } from '@angular/core/testing';

import { EmployeeListComponent } from './employee-list.component';

describe('EmployeeListComponent', () => {
  let component: EmployeeListComponent;
  let fixture: ComponentFixture<EmployeeListComponent>;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [ EmployeeListComponent ]
    })
    .compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(EmployeeListComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

				employee-list.component.ts

import { Component, OnInit } from '@angular/core';
import { Employee } from '../employee'
import { EmployeeService } from '../employee.service'
import { Router } from '@angular/router';
@Component({
  selector: 'app-employee-list',
  templateUrl: './employee-list.component.html',
  styleUrls: ['./employee-list.component.css']
})
export class EmployeeListComponent implements OnInit {

  employees: Employee[];

  constructor(private employeeService: EmployeeService,
    private router: Router) { }

  ngOnInit(): void {
    this.getEmployees();
  }

  private getEmployees(){
    this.employeeService.getEmployeesList().subscribe(data => {
      this.employees = data;
    });
  }

  employeeDetails(id: number){
    this.router.navigate(['employee-details', id]);
  }

  updateEmployee(id: number){
    this.router.navigate(['update-employee', id]);
  }

  deleteEmployee(id: number){
    this.employeeService.deleteEmployee(id).subscribe( data => {
      console.log(data);
      this.getEmployees();
    })
  }
}

							Home
						home.component.html

<h1 class="text-center">Welcome back!!!!</h1>
<img src="../assets/Aadhar1.jpg" class="img-fluid"  class="rounded float-left" alt="Responsive image"  style="width:50%" >&nbsp;


<br><br>
<button type="submit" routerLink="/update-employee/:id" class="btn btn-success">Update Aadhar</button>
<br><br>
<button type="submit" routerLink="/employee-details/6" class="btn btn-success">View Aadhar Details</button>
<br><br>
<button type="submit" class="btn btn-success">Cancel Aadhar Request</button>
<br><br>

<button type="submit" routerLink="/create-employee" class="btn btn-success">New Aadhar Request</button>

						home.component.spec.ts

import { async, ComponentFixture, TestBed } from '@angular/core/testing';

import { HomeComponent } from './home.component';

describe('HomeComponent', () => {
  let component: HomeComponent;
  let fixture: ComponentFixture<HomeComponent>;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [ HomeComponent ]
    })
    .compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(HomeComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

					home.component.ts

import { Component } from "@angular/core";

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.css']
})

export class HomeComponent  {
  constructor() { }

  ngOnInit(): void {
  }

}

						logIn
					logIn.component.html
						
						
<h1 >Login </h1>
<p >Login here to continue with mAadhar</p>
<form>
    <div class="form-group">
      <label for="exampleInputEmail1">Username </label>
      <input type="Username" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="Enter Username">

    </div>
    <div class="form-group">
      <label for="exampleInputPassword1">Password</label>
      <input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password">
    </div>
    <button type="submit" routerLink="/home" class="btn btn-primary">Login</button>
    <a routerLink="/signup">New User?SignUp here!
      </a>
 
  </form>
  
				logIn.component.spec.ts
  
import { async, ComponentFixture, TestBed } from '@angular/core/testing';

import { LoginComponent } from './login.component';

describe('LoginComponent', () => {
  let component: LoginComponent;
  let fixture: ComponentFixture<LoginComponent>;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [ LoginComponent ]
    })
    .compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(LoginComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});

							signUp
						signUp.component.html

<h1 >Register </h1>
<p >Register here to continue with mAadhar</p>

<form> 
   
        <div class="form-group col-md-6">
            <label>UserName</label>
            <input type="username" class="form-control" id="inputEmail4" placeholder="Username">
          </div>
      <div class="form-group col-md-6">
        <label >Email</label>
        <input type="email" class="form-control" id="inputEmail4" placeholder="Email">
      </div>
      <div class="form-group col-md-6">
        <label for="inputPassword4">Password</label>
        <input type="password" class="form-control" id="inputPassword4" placeholder="Password">
      </div>
   
    <div class="form-group col-md-6">
        <label for="inputPassword4">Confirm Password</label>
        <input type="password" class="form-control" id="inputPassword4" placeholder="Password">
      </div>
   
      <button type="submit" routerLink="/login" class="btn btn-primary">Signup</button>
    <a routerLink="/login">Existing User?login here!
    </a>
  </form> 
  
					signup.component.spec.ts
					
import { async, ComponentFixture, TestBed } from '@angular/core/testing';

import { SignupComponent } from './signup.component';

describe('SignupComponent', () => {
  let component: SignupComponent;
  let fixture: ComponentFixture<SignupComponent>;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [ SignupComponent ]
    })
    .compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(SignupComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


					UPdate-employee
				update-employee.component.html
					
<div class="col-md-6 offset-md-3">
    <h3> Update AadharDetails </h3>
    <form (ngSubmit) = "onSubmit()">
    
        <div class="form-group">
            <label> First Name</label>
            <input type="text" class ="form-control" id = "firstName"
                [(ngModel)] = "employee.firstName" name = "firstName">
        </div>
    
        <div class="form-group">
            <label> Last Name</label>
            <input type="text" class ="form-control" id = "lastName"
                [(ngModel)] = "employee.lastName" name = "lastName">
        </div>
    
        <div class="form-group">
            <label> Date of Birth</label>
            <input type="date" class ="form-control" id = "dob"
                [(ngModel)] = "employee.dob" name = "dob">
        </div>
        <div class="form-group">
            <label> Address </label>
            <input type="text" class ="form-control" id = "address"
                [(ngModel)] = "employee.address" name = "address">
        </div>
    
        <div class="form-group">
            <label> Email Id</label>
            <input type="text" class ="form-control" id = "emailId"
                [(ngModel)] = "employee.emailId" name = "emailId">
        </div>
    
        <div class="form-group">
            <label> Mobile Number</label>
            <input type="text" class ="form-control" id = "mobileNo"
                [(ngModel)] = "employee.mobileNo" name = "mobileNo">
        </div>

     
    
        <button class = "btn btn-success" type ="submit">Submit</button>
    
    </form>
    </div> 
	
					update-employee.component.spec.ts
	
import { async, ComponentFixture, TestBed } from '@angular/core/testing';

import { UpdateEmployeeComponent } from './update-employee.component';

describe('UpdateEmployeeComponent', () => {
  let component: UpdateEmployeeComponent;
  let fixture: ComponentFixture<UpdateEmployeeComponent>;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      declarations: [ UpdateEmployeeComponent ]
    })
    .compileComponents();
  }));

  beforeEach(() => {
    fixture = TestBed.createComponent(UpdateEmployeeComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});


						update-employee.component.ts

import { Component, OnInit } from '@angular/core';
import { EmployeeService } from '../employee.service';
import { Employee } from '../employee';
import { ActivatedRoute, Router } from '@angular/router';

@Component({
  selector: 'app-update-employee',
  templateUrl: './update-employee.component.html',
  styleUrls: ['./update-employee.component.css']
})
export class UpdateEmployeeComponent implements OnInit {

  id: number;
  employee: Employee = new Employee();
  constructor(private employeeService: EmployeeService,
    private route: ActivatedRoute,
    private router: Router) { }

  ngOnInit(): void {
    this.id = this.route.snapshot.params['id'];

    this.employeeService.getEmployeeById(this.id).subscribe(data => {
      this.employee = data;
    }, error => console.log(error));
  }

  onSubmit(){
    this.employeeService.updateEmployee(this.id, this.employee).subscribe( data =>{
      this.goToEmployeeList();
    }
    , error => console.log(error));
  }

  goToEmployeeList(){
    this.router.navigate(['/employees']);
  }
}

					app-routing.module.ts

import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';
import { LoginComponent } from './login/login.component';
import { SignupComponent } from './signup/signup.component';
import { HomeComponent } from './home/home.component';
import { EmployeeListComponent } from './employee-list/employee-list.component';
import { CreateEmployeeComponent } from './create-employee/create-employee.component';
import { UpdateEmployeeComponent } from './update-employee/update-employee.component';
import { EmployeeDetailsComponent } from './employee-details/employee-details.component';

const routes: Routes = [
  {path: 'login', component: LoginComponent},
  {path: 'signup', component: SignupComponent},
  {path: 'home', component: HomeComponent},
  {path: 'employees', component: EmployeeListComponent},
  {path: 'create-employee', component: CreateEmployeeComponent},
  {path: '', redirectTo: 'login', pathMatch: 'full'},
  {path: 'update-employee/:id', component: UpdateEmployeeComponent},
  {path: 'employee-details/:id', component: EmployeeDetailsComponent}
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],                                                                                                                                                                                                                                                                                                          
  exports: [RouterModule]
})
export class AppRoutingModule { }


						app-component.html

<nav class="navbar navbar-expand-sm bg-success navbar-dark" style="background-color: #e3f2fd;">   
  <ul class = "navbar-nav">
      <li class = "nav-item">
          <a routerLink="login" routerLinkActive="active" class="nav-link" >Login</a>
      </li>
      <li class = "nav-item">
          <a routerLink="employees" routerLinkActive="active" class="nav-link" >AadharUser List</a>
      </li>
      
      <li class = "nav-item">
          <a routerLink="create-employee" routerLinkActive="active" class="nav-link" >New Aadhar</a>
      </li>
      &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;
      &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;
      &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;
      &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;
      &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;
      &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;
      &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;
      <li class = "nav-item">
          <a routerLink="signup" routerLinkActive="active" class="nav-link" >SignUp</a>
      </li>
      <li class = "nav-item">
          <a routerLink="login" routerLinkActive="active" class="nav-link" >Login</a>
      </li>
  </ul>
</nav>
<img src="../assets/aadharlogo.png" class="img-fluid"  class="rounded float-left" alt="Responsive image"  style="width:10%" >&nbsp;
<h1 class="text-left"> {{title}} </h1>
<br>
<div class = "container">
  <router-outlet></router-outlet>
</div>

<footer class = "footer">
  <div class = "container">
      <span>@Copyright 2022 ,developed By:Amaravathy</span>
  </div>
</footer>

				app-module.ts

import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { HttpClientModule } from '@angular/common/http'
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { EmployeeListComponent } from './employee-list/employee-list.component';
import { CreateEmployeeComponent } from './create-employee/create-employee.component';
import { FormsModule} from '@angular/forms';
import { UpdateEmployeeComponent } from './update-employee/update-employee.component';
import { EmployeeDetailsComponent } from './employee-details/employee-details.component';
import { LoginComponent } from './login/login.component';
import { SignupComponent } from './signup/signup.component';
import { HomeComponent } from './home/home.component'

@NgModule({
  declarations: [
    AppComponent,
    EmployeeListComponent,
    CreateEmployeeComponent,
    UpdateEmployeeComponent,
    EmployeeDetailsComponent,
    LoginComponent,
    SignupComponent,
    HomeComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    HttpClientModule,
    FormsModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }