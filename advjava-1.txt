						Set Up JDBC Environment ..
DESCRIPTION
This section will guide you to:
● Set up Eclipse to work with JDBC
● Create an HTML page to call a servlet
● Create a servlet that will initialize JDBC and then close it

This problem has twelve subsections, namely:

2.1.1 Creating a dynamic web project

●	Open Eclipse 
●	Go the File menu. Choose New->Dynamic Web Project.
●	Enter the project name as JDBCDemo. Click on Next
●	Enter nothing in the next screen and click on Next
●	Check the checkbox Generate web.xml deployment descriptor and click on Finish
●	This will create the project files in the Project Explorer

2.1.2 Adding the jar files for MySQL connection for Java

●	mysql-connector-java.jar is already present in your eclipse. 
●	Take mysql-connector-java.jar file from the folder mentioned in the eclipse and add it to the project’s WebContent/WEB-INF/lib folder

2.1.3 Creating an HTML page index.html

●	In the Project Explorer, expand the project JDBCDemo
●	Expand WebContent. Right click on WebContent. Choose New->HTML File
●	Enter the filename as index.html and click on Finish
●	Enter the following code:

<a href="init" >Initialize JDBC here</a>

2.1.4 Creating a DBUtil class to initiate a JDBC connection in code

●	In the Project Explorer, expand JDBCDemo->Java Resources
●	Right click on src and choose New->Class
●	In Package, enter com.simpli and in Name enter DBUtil and click on Finish
●	Enter the following code:

package com.simpli;
import java.sql.*;
public class DBUtil 
{
	Connection connection;
	public DBUtil(String dbURL, String user, String pwd) 
	{
		try 
		{
			// step 1 : Loading the JDBC driver class;
			Class.forName("com.mysql.jdbc.Driver");

			// step 2 : Use the Driver Manager to get a connection to the database;
			this.connection = DriverManager.getConnection(dbURL, user, pwd);
		}
		catch (ClassNotFoundException e) 
		{
			System.out.println(e);
		}
		catch (SQLException e) 
		{
			System.out.println(e);
		}
	}
	public Connection getConnection() 
	{
		return this.connection;
	}

	public void closeConnection() throws SQLException 
	{
		if (this.connection != null)
			this.connection.close();
	}
}

2.1.5 Creating a config.properties file to store JDBC credentials

url=jdbc:mysql://localhost:3306/ECOMMERCE
userid=root
password=Simplilearn

2.1.6 Creating a JDBCInit servlet

package com.simpli;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.sql.*;
import java.util.Properties;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
@WebServlet("/init")
public class JDBCInit extends HttpServlet 
{
	private static final long serialVersionUID = 1L;
    public JDBCInit() 
	{
        super();
    }
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException 
	{
		PrintWriter out = response.getWriter();
        out.println("<html><body>");
        // Load the DB properties from the config file
        InputStream in = getServletContext().getResourceAsStream("config.properties");        
        Properties props = new Properties();
        props.load(in);       
        DBUtil dbutil = new DBUtil(props.getProperty("url"),
       	props.getProperty("userid"), props.getProperty("password"));        
        Connection connection = dbutil.getConnection();
        out.println("DB Connection initialized successfully!");
        out.println("</body></html>");
	}
}

2.1.7 Configuring web.xml

<web-app>
  <servlet>
    <servlet-name>JDBCInit</servlet-name>
    <servlet-class>JDBCInit</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>JDBCInit</servlet-name>
    <url-pattern>/init</url-pattern>
  </servlet-mapping> 
</web-app>

2.1.8 Checking for servlet-api.jar

●	Before building the project, we need to add servlet-api.jar to the project
●	Servlet-api.jar file is already present in your system.  
●	To add it to the project, follow the below mentioned steps:
o	In the Project Explorer, right click on JDBCSetup and choose Properties
o	Select Java Build Path from the options on the left
o	Click on Libraries tab on the right
o	Under ClassPath, expand the node that says Apache Tomcat
o	If there is an existing entry for servlet-api.jar, then click on Cancel and exit the window
o	If it is not there, then click on Classpath entry and click on Add External JARs button on the right
o	From the file list, select servlet-api.jar file and click on Ok
o	Click on Apply and Close

2.1.9 Building the project

●	From the Project menu at the top, click on Build
●	If any compile errors are shown, fix them as required

2.1.10 Publishing and starting the project

●	If you do not see the Servers tab near the bottom of the IDE, go to Window menu and click on Show View->Servers
●	Right click the Server entry and choose Add and Remove
●	Click the Add button to move JDBCDemo from the Available list to the Configured list
●	Click on Finish
●	Right click the Server entry and click on Publish
●	Right click the Server entry and click on Start
●	This will start the server

2.1.11    Running the project

●	To run the project, open a web browser and type: http://localhost:8080/JDBCDemo

2.1.12    Pushing the code to your GitHub repositories
 
●	Open your command prompt and navigate to the folder where you have created your files.
		cd <folder path>
●	Initialize your repository using the following command:
		git init
●	Add all the files to your git repository using the following command:
		git add .
●	Commit the changes using the following command:
		git commit . -m “Changes have been committed.”
●	Push the files to the folder you initially created using the following command:
		git push -u origin master

